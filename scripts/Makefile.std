#-------------------------------------------------------------------------
#
#  Copyright (c) 2011, 2018, 2019 Rajit Manohar
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor,
#  Boston, MA  02110-1301, USA.
#
#-------------------------------------------------------------------------
#
# Standard makefile rules
#
#
ifndef VLSI_TOOLS_SRC
VLSI_TOOLS_SRC=$(HOME)/VLSI/tools
endif

ifndef LEVEL
LEVEL=0
endif

include $(VLSI_TOOLS_SRC)/scripts/config

.SUFFIXES: .os

INSTALLBIN=$(INSTALLDIR)/bin
INSTALLLIB=$(INSTALLDIR)/lib
INSTALLINC=$(INSTALLDIR)/include
INSTALLMAN=$(INSTALLDIR)/man
INSTALLINFO=$(INSTALLDIR)/info

EXT=$(ARCH)_$(OS)

LIBCOMMON=-L$(INSTALLLIB) -lvlsilib
LIBACT=-L$(INSTALLLIB) -lact -lvlsilib
LIBACTPASS=-L$(INSTALLLIB) -lactpass -lact -lvlsilib
LIBSSIM=-L$(INSTALLLIB) -lssim -lvlsilib
LIBASIM=-L$(INSTALLLIB) -lasim -lvlsilib

LIBDEPEND=$(INSTALLLIB)/libvlsilib.a
ACTDEPEND=$(INSTALLLIB)/libact.a $(LIBDEPEND)
ACTPASSDEPEND=$(ACTDEPEND) $(INSTALLLIB)/libactpass.a
SSIMDEPEND=$(INSTALLLIB)/libssim.a $(LIBDEPEND)
ASIMDEPEND=$(INSTALLLIB)/libasim.a $(LIBDEPEND)

CC=$(C_COMPILER_NAME)
CXX=$(CXX_COMPILER_NAME)

DFLAGS=-DARCH_$(ARCH) -DOS_$(OS) -DBASEOS_$(BASEOS) -I$(INSTALLINC) # -D_FORTIFY_SOURCE=0
ifndef DEPEND_FLAGS
DEPEND_FLAGS=-I.
endif
CFLAGS=$(C_COMPILER_FLAGS) 


all: dependsub allsub move-in $(TARGETLIBS) install_lib install_inc $(TARGETS) $(EXTRA) move-out postsub

SUBDIRS_ALL=$(patsubst %,%_all,$(SUBDIRS))
SUBDIRS_CLEAN=$(patsubst %,%_clean,$(SUBDIRS))
SUBDIRS_REALCLEAN=$(patsubst %,%_realclean,$(SUBDIRS))
SUBDIRS_DEPEND=$(patsubst %,%_depend,$(SUBDIRS))
SUBDIRS_INSTALL=$(patsubst %,%_install,$(SUBDIRS))
SUBDIRS_RUNTEST=$(patsubst %,%_runtest,$(SUBDIRS))
SUBDIRS_POST=$(patsubst %,%_post,$(SUBDIRSPOST))

.PHONY: all move-in move-out install_lib install_inc depend \
	allsub 	$(SUBDIRS_ALL) \
	cleansub $(SUBDIRS_CLEAN) \
	realcleansub $(SUBDIRS_REALCLEAN) \
	dependsub $(SUBDIRS_DEPEND) \
	installsub $(SUBDIRS_INSTALL) \
	runtest $(SUBDIRS_RUNTEST) \
        postsub $(SUBDIRS_POST)

postsub: $(SUBDIRS_POST)
allsub: $(SUBDIRS_ALL)
cleansub:  $(SUBDIRS_CLEAN)
realcleansub:  $(SUBDIRS_REALCLEAN)
dependsub:  $(SUBDIRS_DEPEND)
installsub:  $(SUBDIRS_INSTALL)
runtestsub: $(SUBDIRS_RUNTEST)

$(SUBDIRS_ALL):
	@$(MAKE) -C $(patsubst %_all,%,$@) "CFLAGS=$(CFLAGS)"

$(SUBDIRS_POST):
	@$(MAKE) -C  $(patsubst %_post,%,$@) "CFLAGS=$(CFLAGS)"

$(SUBDIRS_CLEAN):
	@$(MAKE) -C $(patsubst %_clean,%,$@) clean

$(SUBDIRS_REALCLEAN):
	@$(MAKE) -C $(patsubst %_realclean,%,$@) realclean

$(SUBDIRS_DEPEND):
	@$(MAKE) -C $(patsubst %_depend,%,$@) depend

$(SUBDIRS_INSTALL):
	@$(MAKE) -C $(patsubst %_install,%,$@) install

$(SUBDIRS_RUNTEST):
	@$(MAKE) -C $(patsubst %_runtest,%,$@) runtest

clean: move-in cleansub
	-/bin/rm $(OBJS) *~ Makefile.deps $(CLEAN)
	-rmdir $(EXT)

realclean: clean realcleansub
	-/bin/rm $(TARGETS) $(filter-out %.c %.h,$(TARGETLIBS))

depend: $(GENERATED) dependsub
	-$(VLSI_TOOLS_SRC)/scripts/mymakedepend "$(SRCS)" $(DFLAGS) $(DEPEND_FLAGS)

install: move-in install_bin install_lib install_inc move-out installsub

install_bin: $(TARGETS)
	@for i in dummy_bad_name $(TARGETS); \
                do \
                if [ $$i != "dummy_bad_name" ]; \
                then \
                        if [ -d $(INSTALLBIN) ]; \
                        then \
                                tgt=`expr $$i : '\(.*\)\.$(EXT)$$'`; \
                                if [ "x$$tgt" = "x" ]; \
                                then \
                                        tgt=$$i; \
                                fi; \
                                $(VLSI_TOOLS_SRC)/scripts/install $$i $(INSTALLBIN)/$$tgt; \
                        fi; \
                fi; \
                done

install_lib: $(TARGETLIBS)
	@for i in dummy_bad_name $(TARGETLIBS); \
	do \
		if [ $$i != "dummy_bad_name" ]; \
                then \
                        if [ -d $(INSTALLLIB) ]; \
                        then \
                                tgt=`expr $$i : '\(.*\)_$(EXT).a$$'`; \
                                if [ "x$$tgt" = "x" ]; \
                                then \
				tgt=`expr $$i : '\(.*\)_$(EXT).so$$'`; \
					if [ "x$$tgt" = "x" ]; \
					then \
						tgt=$$i; \
					else \
						tgt=$${tgt}.so; \
					fi; \
                                else \
                                        tgt=$${tgt}.a; \
                                fi; \
                                $(VLSI_TOOLS_SRC)/scripts/install $$i $(INSTALLLIB)/$$tgt; \
                        fi; \
                fi; \
                done

install_inc: $(TARGETINCS)
	@for i in dummy_bad_name $(TARGETINCS); \
                do \
                if [ $$i != "dummy_bad_name" ]; \
                then \
                        if [ -d $(INSTALLINC) ]; \
                        then \
				if [ "x$(TARGETINCSUBDIR)" = "x" ]; \
				then \
                                tgt=$$i; \
                                $(VLSI_TOOLS_SRC)/scripts/install $$i $(INSTALLINC)/$$tgt; \
				else \
					if [ ! -d $(INSTALLINC)/$(TARGETINCSUBDIR) ]; \
					then \
					mkdir $(INSTALLINC)/$(TARGETINCSUBDIR); \
					fi; \
                                tgt=$$i; \
                                $(VLSI_TOOLS_SRC)/scripts/install $$i $(INSTALLINC)/$(TARGETINCSUBDIR)/$$tgt; \
				fi; \
                        fi; \
                fi; \
                done

runtest: runtestsub
	@if [ -d test -a -x test/run.sh ]; \
	then \
		(cd test; ./run.sh); \
	fi

move-in:
	@$(VLSI_TOOLS_SRC)/scripts/move-in

move-out:
	@$(VLSI_TOOLS_SRC)/scripts/move-out

.c.o:
	$(CC) -c $(CFLAGS) $(DFLAGS) $<

.C.o:
	$(CXX) -c $(CFLAGS) $(DFLAGS) $<

.cc.o:
	$(CXX) -c $(CFLAGS) $(DFLAGS) $<

.c.os:
	$(CC) -c $(CFLAGS) $(DFLAGS) $(SH_BUILD_OPTIONS) $< -o $*.os

