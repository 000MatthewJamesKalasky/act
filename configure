#!/bin/sh
#-------------------------------------------------------------------------
#
#  Copyright (c) 2011 Rajit Manohar
#  All Rights Reserved
#
#-------------------------------------------------------------------------
#
# Create the "config" file in the scripts/ directory that contains
# standard definitions
#

if [ x$VLSI_TOOLS_SRC = "x" ]
then
	echo "Environment variable VLSI_TOOLS_SRC undefined."
	echo "It should be set to the root of the tools source tree."
	exit 1
fi

first_char=`echo $0 | sed 's/^\(.\).*$/\1/g'`

if [ x$first_char = "x/" ]
then
	full_pathname=./`dirname $0`
else
	full_pathname=`pwd`/`dirname $0`
fi

arch=`$full_pathname/scripts/getarch`;
os=`$full_pathname/scripts/getos`;
baseos=`$full_pathname/scripts/getbaseos`;

installdir=/usr/local/cad

if [ $# -gt 0 ]
then
      installdir=$1
fi

if [ ! -d $installdir ]
then
     echo "Missing install directory [$installdir]."
     exit 1
fi

echo "Configuring for [$arch] architecture, os [${os}]"
echo "Install directory: [$installdir]"

#
# Binaries
#
if [ ! -d $installdir/bin ]
then
    mkdir $installdir/bin
fi

#
# C/C++ Libraries
#
if [ ! -d $installdir/lib ]
then
    mkdir $installdir/lib
fi

#
# Header files for libraries
#
if [ ! -d $installdir/include ]
then
    mkdir $installdir/include
fi

if [ ! -d $installdir/include/act ]
then
    mkdir $installdir/include/act
fi


#
# Technology configuration
#
if [ ! -d $installdir/conf ]
then
    mkdir $installdir/conf
fi

#
# ACT standard includes
#
if [ ! -d $installdir/act ]
then
    mkdir $installdir/act
fi

# get additional CFLAGS and pass them through
if [ $# -gt 1 ]
then
    case $2 in
    "CFLAGS="*) addon_cflags=${2#CFLAGS=}
     addon_cflags=${addon_cflags#\"}
     addon_cflags=${addon_cflags#\'}
     echo "CFLAGS: $addon_cflags"
    esac
fi

#
# shared linking on macos
#
if [ "x$baseos" = "xdarwin" ]
then
    sh_build=-fPIC 
    sh_link=-dynamiclib
    sh_exe_options=
elif [ "x$baseos" = "xlinux" ] || [ "x$baseos" = "xsolaris" ]
then
    sh_build="\"-shared -DPIC -fPIC\""
    # the RUNPATH shared object search parameter are relative the location of the binary during runtime, and as backup the compile time $ACT_HOME path is used
    # libraries and executables are parsed differently by the build system hand have therefor different escape patterns
    sh_link="\"-shared -Wl,-x,-rpath=\\\$ORIGIN/../lib,-rpath=$ACT_HOME/lib\""
    sh_exe_options="\"-Wl,-rpath=\\$\$ORIGIN/../lib,-rpath=$ACT_HOME/lib\""
else
    sh_build="\"-shared -DPIC -fPIC\""
    sh_link="\"-shared -Wl,-x,-rpath=$ACT_HOME/lib\""
    sh_exe_options="\"-Wl,-rpath=$ACT_HOME/lib\""
fi    


c_compiler_name=gcc
cxx_compiler_name=g++
# the double parentesis are needed beause of double parcing in the check script and are removed in the makefile to have the intended behaviour
c_compiler_flags="\"-O2 ${addon_cflags}\""
make_program=gmake
myranlib=ranlib

cat <<EOF > $full_pathname/scripts/config
#
# This file is auto-generated, don't edit it!
#
ARCH=$arch
OS=$os
BASEOS=$baseos
RANLIB=$myranlib
INSTALLDIR=$installdir
C_COMPILER_NAME=$c_compiler_name
CXX_COMPILER_NAME=$cxx_compiler_name
C_COMPILER_FLAGS=$c_compiler_flags
SH_BUILD_OPTIONS=$sh_build
SH_LINK_OPTIONS=$sh_link
SH_EXE_OPTIONS=$sh_exe_options
EOF

if ! $full_pathname/scripts/check
then
	exit 1
fi

